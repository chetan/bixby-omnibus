#!/usr/bin/env ruby

$: << File.expand_path("../../lib", __FILE__)
require 'build/vagrant'
require 'build/build_opts'

opts = Bixby::BuildOpts.new.config
boxes = Vagrant.get_boxes()

# --list
if opts[:list] then
  puts "Boxes:"
  boxes.each_with_index do |box, i|
    puts " #{i+1}: #{box}"
  end
  exit
end


# make sure we have vagrant installed (via system package)
require 'vagrant-wrapper'
VagrantWrapper.require_or_help_install(">= 1.4")

require 'chronic_duration'
require 'mixlib/shellout'


pids = [] # list of forked processes

# filter list of vms
only_vms = opts[:boxes] ? opts[:boxes].split(/,|\s/) : []
if not only_vms.empty? then
  boxes = boxes.find_all{ |b| only_vms.find{ |v| b.include?(v) || b =~ /#{v}/ } }
end

# commands needed to do a build
cmd = '\wget -q --no-check-certificate https://raw.github.com/chetan/bixby-omnibus/master/scripts/shim.sh -O - |'
if opts[:revision] then
  cmd += %Q( BIXBY_GIT_REV="#{opts[:revision]}")
end
if opts[:clean] then
  cmd += ' CLEAN=1'
end
cmd += " /bin/bash"

logdir = File.expand_path("../log", __dir__)
Dir.mkdir(logdir) if not File.directory? logdir


# loop through each env and build
boxes.each do |name|

  next if name =~ /test/

  # TODO fix
  # if not vm.created?
  #   puts "WARNING: vm '#{name}' is not created; won't build!"
  # end

  pids << fork do

    if only_vms.empty? or only_vms.size > 1 then
      # redirect stdout/stderr if building more than one package
      io = File.open("#{logdir}/#{name}.log", "w+")
      STDOUT.reopen(io)
      STDERR.reopen(io)
    end

    puts
    puts
    puts "-----------------------------------------------------------------------"
    puts "VM: #{name}"
    puts "-----------------------------------------------------------------------"
    puts

    # TODO fix
    # vm.start()

    start = Time.new.to_i

    c = "vagrant ssh #{name} -c '#{cmd}'"
    shell = Mixlib::ShellOut.new(c)
    shell.run_command

    elapsed = Time.new.to_i - start
    puts "status: #{shell.status}"
    puts "elapsed: #{ChronicDuration.output(elapsed)}"
    puts
    puts "-----------------------------------------------------------------------"
    puts "stdout:"
    puts "-----------------------------------------------------------------------"
    puts shell.stdout
    puts
    puts "-----------------------------------------------------------------------"
    puts "stderr:"
    puts "-----------------------------------------------------------------------"
    puts shell.stderr
    puts

    # TODO fix
    # shutdown vm if we passed --halt
    # if halt then
    #   vm.halt()
    # end
  end

  # break
end

pids.each{ |pid| Process.waitpid(pid) }
